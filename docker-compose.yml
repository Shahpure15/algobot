version: '3.8'

services:
  algobot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: algobot
    restart: unless-stopped
    environment:
      - DELTA_API_KEY=${DELTA_API_KEY}
      - DELTA_API_SECRET=${DELTA_API_SECRET}
      - DELTA_TESTNET=${DELTA_TESTNET:-true}
      - TRADING_SYMBOL=${TRADING_SYMBOL:-BTCUSDT_PERP}
      - TRADING_TIMEFRAME=${TRADING_TIMEFRAME:-5m}
      - POSITION_SIZE=${POSITION_SIZE:-0.01}
      - MAX_POSITION_SIZE=${MAX_POSITION_SIZE:-0.1}
      - RISK_PER_TRADE=${RISK_PER_TRADE:-0.02}
      - MAX_DAILY_LOSS=${MAX_DAILY_LOSS:-0.05}
      - STOP_LOSS_PCT=${STOP_LOSS_PCT:-0.02}
      - TAKE_PROFIT_PCT=${TAKE_PROFIT_PCT:-0.04}
      - MAX_OPEN_POSITIONS=${MAX_OPEN_POSITIONS:-3}
      - MODEL_PATH=${MODEL_PATH:-data/models/}
      - RETRAIN_INTERVAL=${RETRAIN_INTERVAL:-24}
      - MIN_CONFIDENCE=${MIN_CONFIDENCE:-0.65}
      - LOOKBACK_PERIOD=${LOOKBACK_PERIOD:-200}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///data/trading_bot.db}
      - DB_ECHO=${DB_ECHO:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FILE=${LOG_FILE:-data/logs/bot.log}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-false}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - algobot-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: algobot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - algobot-network

  postgres:
    image: postgres:15-alpine
    container_name: algobot-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-algobot}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-algobot123}
      - POSTGRES_DB=${POSTGRES_DB:-algobot}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - algobot-network

  grafana:
    image: grafana/grafana:latest
    container_name: algobot-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - algobot-network

  prometheus:
    image: prom/prometheus:latest
    container_name: algobot-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - algobot-network

volumes:
  redis_data:
  postgres_data:
  grafana_data:
  prometheus_data:

networks:
  algobot-network:
    driver: bridge
